アプリケーションスコープとは

  アプリケーションスコープとは、1つのアプリケーション開始につき1つ作成される
  スコープです。アプリケーションが終了するまですべてのサーブレット、jsp
  で利用できます。
  
Webアプリケーションの開始と停止とは？

  1：サーバの起動と停止
  2：オートリロード機能
  3：管理ツールによる開始と終了
  
  1：サーバの起動と停止
    アプリケーションサーバの起動/停止に従い、そのサーバに追加されている
    Webアプリケーションも一緒に開始/終了しています。
    
  2：オートリロード機能
    Webアプリケーションを修正するたびに、サーバを再読み込みする機能になり
    ます。修正するたびにアプリケーションスコープを削除してしまうので注意
    Apache Tomcatではデフォルトで無効になっています
  
  3：管理ツールによる開始と終了
    アプリケーションサーバでは、特定のWebアプリケーションを管理する
    管理ツールによって、アプリケーションを開始、停止させることができます。

  ★つまり、アプリケーションの開始/停止は、サーバの起動と停止のたびに行われる！


アプリケーションスコープの基本操作

  アプリケーションスコープの取得
    HttpServletから継承したgetServletContext()メソッドで
                              ServletContextインスタンスを取得

  アプリケーションスコープに保存する
    application.setAttribute("属性名",インスタンス);

  アプリケーションスコープからインスタンスを取得
    取得インスタンスの型 変数名=(キャスト)application.getAttribute("属性名")

  アプリケーションスコープからインスタンスを削除
    application.removeAttribute("属性名")

  JSPファイルでアプリケーションスコープを使う場合
    暗黙オブジェクト「application」を使用

アプリケーションスコープ例文
package servlet;

import java.io.IOException;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import model.SiteEV;
import model.SiteEVLogic;

/**
 * Servlet implementation class MinatoIndex
 */
@WebServlet("/MinatoIndex")
public class MinatoIndex extends HttpServlet {
	private static final long serialVersionUID = 1L;

    /**
     * @see HttpServlet#HttpServlet()
     */
    public MinatoIndex() {
        super();
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
	//	response.getWriter().append("Served at: ").append(request.getContextPath());

		//アプリケーションスコープに保存されたサイト評価(javabnsを取得)
		ServletContext application=this.getServletContext();
		SiteEV siteEV=(SiteEV)application.getAttribute("siteEV");

		//アプリケーションスコープが設定されていなかった場合
		//サイト評価の初期化（初回リクエスト時）
		if(siteEV==null) {
			siteEV=new SiteEV();
		}

		//リクエストパラメータの取得
		request.setCharacterEncoding("UTF-8");
		String action =request.getParameter("action");

		//サイトの評価処理
		SiteEVLogic siteEVLogic=new SiteEVLogic();
		if(action!=null && action.equals("like")) {
			siteEVLogic. like(siteEV);
		}else if(action != null && action.equals("dislike"));{
			siteEVLogic.dislike(siteEV);
		}

		//アプリケーションスコープにサイト評価を保存
		application.setAttribute("siteEV", siteEV);

		//フォワード
		RequestDispatcher dispatcher=request.getRequestDispatcher
				("/WEB-INF/minatoIndex.jsp");
		dispatcher.forward(request, response);


	}

アプリケーションスコープの注意点

  同時アクセスによる更新
    アプリケーションスコープのインスタンスを更新する処理を、複数の
    リクエストがほぼ同じタイミングで行うと、アプリケーションスコープ
    のインスタンスに不具合が発生する場合があります。
    
  対処法
    ・アプリケーションスコープを使用しない
    ・スレッドによう競合が発生しないように調停を行う。
      ※スレッドとは、1つの処理の単位を示す。
  
  インスタンスの保存期間
    アプリケーションスコープに保存したインスタンスは、Webアプリケー
    ションを終了すると消滅します。
    セッションスコープと違い、タイムアウトがないため、必要のないもの
    は、削除しないとメモリを圧迫してしまうので注意が必要です。
  
  
【Webサーバの性能判定】
1. Apache Bench ( [参考] JMeter )

・「ab」：Apache Bench（アパッチ ベンチ）の
・Apacheに標準装備されているWEBサーバの性能を計測するためのコマンド
  →<Apache Install Directory>\bin\ab.exe

2. 使い方

基本的には-nと-cオプションを使うことになる

コマンド形式）
  ab -n <Total発行リクエスト数> -c <同時接続数><URL>

使用例）URL：http://localhost:8080/example09/MinatoIndex?action=like
① 同時に100ユーザが、1リクエストを発行した場合を想定
→ ab -n 100 -c 100 http://localhost:8080/example09/MinatoIndex?action=like

②同時に100ユーザが、1ユーザあたり10リクエストを発行した場合を想定
  -nには 100*10=1000 を指定
→ab -n 1000 -c 100 http://localhost:8080/example09/MinatoIndex?action=like

【スレッドセーフな設計】

★ スレッドの競合：
   複数のスレッドが同時に同じクラスやメソッド、変数などにアクセスして
   データの不具合を引き起こしてしまう現象

★ スレッドの同期、調停、排他制御：
   スレッドの競合を避けるために、あるスレッドの利用中は他のスレッドは
   待機するようにコントロールすること

 * Javaには、スレッドを調停するための文法が複数用意されており、*
 * それらを上手に利用した「複数のスレッドから同時に利用しても  *
 * 安全なクラスやメソッド」は『スレッドセーフ』な設計であると  *
 * 言われる。                                                  *

● synchronizedによる排他制御

【synchronizedブロック】

  synchronized（対象インスタンス）｛
  	// 複数スレッドから同時に実行されないように保護したいコード
  }


※ synchronizedで囲まれた部分を実行できるスレッドは1つのみである。
   たとえば、スレッドＡがsynchronizedブロックを実行しようとした
   ときに、すでにスレッドＢがブロック内を実行中だった場合、
   スレッドＢがブロックを抜けるまでスレッドＡは待たされる。
   
   ・System.out.printlnで、コンソールログを残すだけでも、競合を
     起こさないようにできます。ですが、サーバに負荷がかかるので
     あまり使うことはありません。