インクルードと標準アクションタグ

  Webページのフッターなどに、共通の内容をJSPファイルに記述したい時が
  あります。その際に、全てのJSPファイルに共通のHTMLを記述しても良いの
  ですが、手間や見た目に悪影響が出るため、基本的にはしません。
  この問題を解決するのが、「動的インクルード」という実行の方法です。
 
  動的インクルードとは
    動的インクルードを使用すると、JSPファイル実行中に、他のJSPファイルを
    実行することができます。
    さらに、動的インクルードによって実行されたJSPファイルが出力した内容を
    動的インクルードを実行したJSPファイルの出力に取り込むことができます。
    ※forwardと似ていますが、リクエストされた後、リクエスト元に処理を返すという違いがあります。

  動的インクルードの方法
    forwardと同様に、RequestDispatchrのinculudeメソッドを使用します。
    <%
    RequestDispatcher dispatcher=request.getRewuestDispatcher("インクルード先")
    dispatcher.include(request,response);
    %>
    forwardの部分が、includeになっただけなので、そこまで記述に違いはありません。

  標準アクションタグについて
    上記のインクルード方法でも、解決はできますが、やはり冗長的になってしまいます。
    そこで、上記javaの記述を、HTMLのタグによって記述を置き換えることが可能になって
    います。それがアクションタグです。標準アクションタグとは、JSPファイルに備わって
    いる標準的なアクションタグのことです。

  アクションタグ
    ・外部に用意されているJavaのコードを呼び出すためのもの
    ・標準アクションタグ：JSPに最初から用意されているアクションタグ
    ・inciudeアクションタグ：サーブレットクラスやJSPファイルを実行し
                             その出力結果を取り込むことができる
                             <jsp:include page="インクルード先" />
                                                              ※終了タグは省略不可

アクションタグの例文
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>インクルードのサンプル</title>
</head>
<body>
<h1>どこつぶへようこそ</h1>
<p>どこつぶは・・・</p>
<jsp:include page="/WEB-INF/footer.jsp"/>
</body>
</html>

インクルード先のjspファイル例文
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<p>Copyright どこつぶ製作委員会 All Rights Reserved.</p>


静的インクルード
  
  静的インクルードとは
    動的インクルードと他に、静的インクルードがあります。動的インクルード
    とは違い、タグ指定ではなく、ディレクティブ指定となります。
    ※ディレクティブ→<%@ %>内で囲むコード

  静的インクルードの動作
    動的インクルードは、指定した場所にそのままインクルード先の内容が
    記述されるというものでした。静的インクルードは、ディレクティブ指定
    したJSPファイルの実行前にインクルード先の内容を取り込みます。

  静的インクルードディレクティブの記述方法
    <%@ include file="インクルード先"%>
    ※インクルード先は「/WebContentからのパス」を指定する。
      例）WebContent直下のindex.jspをインクルードする場合：/index.jsp
    ※サーブレットクラスはインクルードできない。

静的インクルード例文
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8" %>
<%-- 静的インクルードによって、変数の初期化、import文の記述を取り込む --%>
<%@ include file="/WEB-INF/common.jsp" %>
<%
Date date=new Date();
SimpleDateFormat sdf=new SimpleDateFormat("MM月dd日");
String[] luckArray={"超スッキリ","スッキリ","最悪"};
int index=(int)(Math.random()*3);
String luck=luckArray[index];
String today=sdf.format(date);
%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>スッキリ占い</title>
</head>
<body>
<p><%=name%>さんの<%= today%>の運勢は<%=luck%>です。<%=countL %>回目</p>
<p><%=name %>さんの<%=today %>の運勢は<%=luck %>です。<%=countS %>回目</p>
</body>
</html>

静的インクルード先例文
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%--インクルード元で使用したいクラスをimport --%>
<%@ page import="java.util.Date,java.text.SimpleDateFormat"
 %>
 <%--変数の初期化（毎回実行) --%>
 <%--ローカル変数となり、JSPファイルが呼び出されるたびに初期化が行われる --%>
<%String name="湊 雄輔";%>
<%int countL=0;%>
<%countL++;%>

<%-- [紹介]スクリプト宣言--%>
<%--静的変数となり、初めてJSPファイルが呼び出された時のみ初期化する--%>
<%! String nameS="湊 雄輔";%>
<%! int countS=0;%>
<% countS++;%>

静的インクルードの注意点
  静的インクルードは、動的インクルードと違い、インスタンス同士の
  結合ではなく、2つのJSPファイルを合体させて1つのインスタンスを
  作成するため、インクルード先の修正があった場合、インクルード元
  を更新しなければ、インスタンス化した際に反映されないという違い
  があります。（Tomcat4.1以降は自動更新機能がついている）frth

動的インクルード・静的インクルードの違いまとめ
  動的インクルード
    ・インクルード先の十個結果を取り込む。
    ・インクルード先の内容は利用できない。
    ・インクルード先にサーブレットクラスを指定できる。
  静的インクルードの
    ・インクルード先の内容を取り込む
    ・インクルード先の内容を利用できる。
    ・インクルード先を更新したら、インクルード元も更新する必要がある。
    ・インクルード先にサーブレットクラスは指定できない。

EL式
  EL式とは
    JSPファイルでスコープに保存されたインスタンスを取得する式を簡略化したもの。
  
  EL式の書き方
    従来のJSPファイルでのインスタンス取得方法
    //取得したいクラスをインポート
    <%@ page import="sample.User"%>
    //スコープに保存されたインスタンスをキャストして取得
    <%User user=(User)session.GetAttribute("user");%>
    //取得したインスタンスのプロパティを使用する
    <%=User.getName()%>
    
    EL式
    ${user.name}
      属性値を指定してインスタンスの取得し、同時にインスタンスのgetterを自動実行している。

  EL式の注意点
    スコープに保存されたインスタンスを取得するとても便利な記述方法ですが、
    属性値のみ指定している場合、ページ、リクエスト、セッション、アプリケーション
    の順に属性値を探すため、違うスコープの同名インスタンスが存在した場合、
    一番最初に見つけたインスタンスしか取得できません。
    ※インスタンスが見つからない場合、例外はスローされず何も出力されません。
  
  EL式にスコープの指定をする
    ${sessionScope.user}
    この、「sessionScope」はセッションスコープを表すEL式独自のオブジェクトです。
    EL式にはこのような特別なオブジェクトがいくつか用意されています。
    このようなオブジェクトを「EL式の暗黙オブジェクト」といい、EL式だけで
    使用することができます。
    主なEL式の暗黙オブジェクトについてはp.354参照
    
  EL式の演算子
    EL式では演算子を取得することができます。
    ${user.age+1}//20なら21に
    ${user.age<=20}//条件式ならtrue/falseで
    ※Javaには無い演算子「empty」
      記述方法
        ${empty 対象}
        ${empty user}//false
        trueを返す条件
        ・スコープに保存されていない
        ・null
        ・空文字
        ・要素数が0の配列
        ・インスタンスを1つも格納していないコレクションクラスのインスタンス
        ※empty演算五の結果を反転したい場合、「not empty」演算子を使用する。

  EL式とコレクション
    EL式を使用して、リストやマップを利用することが可能です。
    ・スコープに保存されているリスト内のンインスタンスを取得する
      ${属性名[インデックス]}
    ・スコープに保存されているマップ内のインスタンスを取得する
      ${属性名["キー"]}

  EL式が記述できない場所
    スコープには、リストを格納することができます。そのため、EL式を使用して
    リストを取得し、for文で中身を取り出したい。と思い、次のような文を記述
    したくなると思います。
    <%for(int i=0;i<${userList.size()};i++){}
    しかし、上記文はコンパイルエラーとなります。
    原因は、EL式はスクリプト要素中では使用できないというルールがあるためです。
    このように論理式にEL式を使用したい場合は、次節で紹介する「JSTL」を
    使用する必要があります。


JSTL

  JSTLとカスタムタグ
    EL式で分岐や繰り返しを行うには、JSTLに含まれているカスタムタグを使用します。
    カスタムタグとは、開発者が独自に作成したアクションタグのことです。
    作成したカスタムタグは、「タグライブラリ」にまとめて配布し、第三者に使用して
    もらうことも可能です。
  
  JSTLの構成
    JSTLは、5つのタグライブラリで構成されています。（5つの属性があるみないな？？）
    ・Core：変数、条件分岐、繰り返し等
    ・I18N：数値や日付のフォーマット、国際化対応
    ・Database：データベース
    ・XML：XML操作に関する
    ・Functions：コレクションや文字列
  
  taglibディレクティブで使用するタグライブラリを指定
    <%@ taglib prefix="接頭辞" uri="使用するタグライブラリのURI"%>
    ※それぞれのタグライブラリによって、接頭辞、URIは決まり文句があります。p.362

  Coreタグライブラリ
    Coreタグライブラリを使用すると、変数宣言、分岐と繰り返し、例外処理などの
    Javaプログラミングの基本処理をタグで行えるようになります。